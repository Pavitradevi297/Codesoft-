import tkinter as tk

from tkinter import messagebox



class Contact:

    def __init__(self, name, phone_number, email, address):

        self.name = name

        self.phone_number = phone_number

        self.email = email

        self.address = address



class ContactManager:

    def __init__(self):

        self.contacts = []



    def add_contact(self, contact):

        self.contacts.append(contact)



    def view_contacts(self):

        return self.contacts



    def search_contact(self, search_term):

        results = []

        for contact in self.contacts:

            if search_term.lower() in contact.name.lower() or search_term in contact.phone_number:

                results.append(contact)

        return results



    def update_contact(self, old_contact, new_contact):

        index = self.contacts.index(old_contact)

        self.contacts[index] = new_contact



    def delete_contact(self, contact):

        self.contacts.remove(contact)



class ContactManagerApp:

    def __init__(self, master):

        self.master = master

        self.master.title("Contact Management System")



        self.contact_manager = ContactManager()



        self.name_label = tk.Label(master, text="Name:")

        self.name_label.grid(row=0, column=0)

        self.name_entry = tk.Entry(master)

        self.name_entry.grid(row=0, column=1)



        self.phone_label = tk.Label(master, text="Phone:")

        self.phone_label.grid(row=1, column=0)

        self.phone_entry = tk.Entry(master)

        self.phone_entry.grid(row=1, column=1)



        self.email_label = tk.Label(master, text="Email:")

        self.email_label.grid(row=2, column=0)

        self.email_entry = tk.Entry(master)

        self.email_entry.grid(row=2, column=1)



        self.address_label = tk.Label(master, text="Address:")

        self.address_label.grid(row=3, column=0)

        self.address_entry = tk.Entry(master)

        self.address_entry.grid(row=3, column=1)



        self.add_button = tk.Button(master, text="Add Contact", command=self.add_contact)

        self.add_button.grid(row=4, columnspan=2)



        self.search_label = tk.Label(master, text="Search:")

        self.search_label.grid(row=5, column=0)

        self.search_entry = tk.Entry(master)

        self.search_entry.grid(row=5, column=1)

        self.search_button = tk.Button(master, text="Search", command=self.search_contacts)

        self.search_button.grid(row=5, column=2)



        self.contacts_listbox = tk.Listbox(master, width=50, height=10)

        self.contacts_listbox.grid(row=6, columnspan=3)



        self.populate_contacts_listbox()



    def add_contact(self):

        name = self.name_entry.get()

        phone = self.phone_entry.get()

        email = self.email_entry.get()

        address = self.address_entry.get()

        if name and phone:

            contact = Contact(name, phone, email, address)

            self.contact_manager.add_contact(contact)

            self.populate_contacts_listbox()

            messagebox.showinfo("Success", "Contact added successfully")

            self.clear_entries()

        else:

            messagebox.showerror("Error", "Name and phone number are required")



    def populate_contacts_listbox(self):

        self.contacts_listbox.delete(0, tk.END)

        for contact in self.contact_manager.view_contacts():

            self.contacts_listbox.insert(tk.END, f"{contact.name} - {contact.phone_number}")



    def search_contacts(self):

        search_term = self.search_entry.get()

        if search_term:

            results = self.contact_manager.search_contact(search_term)

            self.contacts_listbox.delete(0, tk.END)

            for contact in results:

                self.contacts_listbox.insert(tk.END, f"{contact.name} - {contact.phone_number}")

        else:

            messagebox.showerror("Error", "Please enter a search term")



    def clear_entries(self):

        self.name_entry.delete(0, tk.END)

        self.phone_entry.delete(0, tk.END)

        self.email_entry.delete(0, tk.END)

        self.address_entry.delete(0, tk.END)



root = tk.Tk()

app = ContactManagerApp(root)

root.mainloop()

